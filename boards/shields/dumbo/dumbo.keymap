// This file was generated from a template. Edit it to match your keyboard.
// See https://zmk.dev/docs/development/hardware-integration/new-shield for more instructions.

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
//            quick_tap_ms = <150>;
            flavor = "tap-preferred";
//            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ------------------------------------------------------------------------------------------------------------
// |       |  Q  |  W  |  F   |  P   |  B   |                   |  J   |  L    |  U    |  Y   |   AA  |       |
// |       |  A  |  R  |  S   |  T   |  G   |                   |  M   |  N    |  E    |  I   |   O   |       |
// |       |  Z  |  X  |  C   |  D   |  V   |                   |  K   |  H    |  ,    |  .   |   AE  |       |
// |                   | MUTE | ESC  |SPACE |  TAB  |   |  ENT  | BCKSP| CAPS  | PLAY  |
// |                                 |NUM   |  SYM  |   |  SYM  |   NUM|
            bindings = <
&none  &kp Q        &kp W       &kp F         &kp P         &kp B                                    &kp J       &kp L         &kp U        &kp Y        &kp LBKT      &none
&none  &hm LCTRL A  &hm LALT R  &hm LGUI S    &hm LSHFT T   &kp G                                    &kp M       &hm RSHFT N   &hm RGUI E   &hm RALT I   &hm RCTRL O   &none
&none  &kp Z        &kp X       &kp C         &kp D         &kp V                                    &kp K       &kp H         &kp COMMA    &kp DOT      &kp SEMI      &none
                                &kp K_MUTE    &kp ESC       &lt 1 SPACE   &lt 2 TAB      &lt 2 RET   &lt 1 BSPC  &kp CAPS      &kp C_PP
            >;
//                             encoder_left1        –          encoder_left2         –       encoder_right2      –     encoder_right1
            sensor-bindings = <&inc_dec_kp C_BRI_INC C_BRI_DEC &inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_NEXT C_PREV &inc_dec_kp PG_UP PG_DN>;
        };

        number_layer {
// TODO: Some binds are waiting for shifted keycode support.
// ------------------------------------------------------------------------------------------------------------
// |       |     |HOME |  ^   |  END |PGUP  |                   |  *   |   7   |   8   |   9  |   +   |       |
// |       |     |  <- |  v   |  ->  |PGDWN |                   |  /   |   4   |   5   |   6  |   OE  |       |
// |       |UNDO | CUT | COPY |      |PASTE |                   |  =   |   1   |   2   |   3  |   -   |       |
// |                   | MUTE | DEL  |SPACE |  TAB  |   |  ENT  | BCKSP|   0   | PLAY  |
// |                                 |NUM   |  SYM  |   |  SYM  |   NUM|
            bindings = <
&none     &none        &kp HOME      &kp UP        &kp END         &kp PG_UP                                 &kp STAR    &kp N7        &kp N8       &kp N9       &kp PLUS      &none
&none     &kp LCTRL    &hm LALT LEFT &hm LGUI DOWN &hm LSHFT RIGHT &kp PG_DN                                 &kp FSLH    &hm RSHFT N4  &hm RGUI N5  &hm RALT N6  &hm RCTRL SQT &none
&none     &kp LG(Z)    &kp LG(X)     &kp LG(C)     &none           &kp LG(V)                                 &kp EQUAL   &kp N1        &kp N2       &kp N3       &kp MINUS     &none
                                     &kp K_MUTE    &kp DEL         &lt 1 SPACE   &lt 2 TAB       &lt 2 RET   &lt 1 BSPC  &kp N0        &kp C_PP
            >;
//                             encoder_left1        –          encoder_left2         –       encoder_right2      –     encoder_right1
            sensor-bindings = <&inc_dec_kp C_BRI_INC C_BRI_DEC &inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_NEXT C_PREV &inc_dec_kp PG_UP PG_DN>;
        };

        symbol_layer {
// ------------------------------------------------------------------------------------------------------------
// |BTCLR| BT1  | BT2  |   [   |   ]   |  F1  |                   |  $   |  /   |   (   |  )   |   ?   |       |
// |     | BRI- | BRI+ |   {   |   }   |  F2  |                   |  @   |  €   |   %   |  &   |   '   |       |
// |     | BT3  | BT4  |   <   |   >   |  F3  |                   |  §   |  !   |   "   |  #   |   _   |       |
// |                   | MUTE  | ESC   |SPACE |  TAB  |   |  ENT  | BCKSP| CAPS | PLAY  |
// |                                   |NUM   |  SYM  |   |  SYM  |   NUM|
            bindings = <
&bt BT_CLR      &bt BT_SEL 0       &bt BT_SEL 1       &kp LA(N8)    &kp LA(N9)      &kp F1                                     &kp STAR    &kp RS(N7)        &kp RS(N8)       &kp RS(N9)       &kp QMARK              &none
&none           &kp C_BRI_DN       &kp C_BRI_DN       &hm LGUI LBRC &hm LSHFT RBRC  &kp F2                                     &kp FSLH    &hm RSHFT RS(N4)  &hm RGUI RS(N5)  &hm RALT RS(N6)  &hm RCTRL NON_US_HASH  &none
&studio_unlock  &bt BT_SEL 2       &bt BT_SEL 3       &kp LT        &kp GT          &kp F3                                     &kp EQUAL   &kp RS(N1)        &kp RS(N2)       &kp RS(N3)       &kp UNDER              &none
                                                      &kp K_MUTE    &kp ESC         &lt 1 SPACE   &lt 2 TAB        &lt 2 RET   &lt 1 BSPC  &kp CAPS          &kp C_PP
            >;
//                             encoder_left1        –          encoder_left2         –         encoder_right2      –     encoder_right1
            sensor-bindings = <&inc_dec_kp C_BRI_INC C_BRI_DEC &inc_dec_kp C_BRI_INC C_BRI_DEC &inc_dec_kp C_NEXT C_PREV &inc_dec_kp PG_UP PG_DN>;
        };
    };
};
